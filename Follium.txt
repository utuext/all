Folium

import folium
import pandas as pd
import numpy as np


district_wise_census = pd.read_csv("/content/district wise population and centroids.csv")
district_wise_census.head()


gujarat_districts = district_wise_census[district_wise_census["State"]=="Gujarat"]

center_lat = gujarat_districts.mean().Latitude
center_long = gujarat_districts.mean().Longitude

m = folium.Map(location=[center_lat, center_long], zoom_start=6.5)


for district in gujarat_districts["District"].unique():
  district_census = gujarat_districts[gujarat_districts["District"]==district]
  folium.Circle(
      location=[district_census.Latitude.values[0], district_census.Longitude.values[0]],
      radius = float(district_census["Population in 2011"].values[0]/100),
      color="yellow" if (district_census["Population in 2011"].values<2000000) else "blue",
      fill_color="yellow" if (district_census["Population in 2011"].values<2000000) else "blue",
      popup="Population 2011 : %s"%district_census["Population in 2011"].values[0],
      tooltip = district_census.District.values[0],
    ).add_to(m)
  
m

Chatboat

# Importing modules

import re

from nltk.corpus import wordnet


import nltk
nltk.download('wordnet')

# Building a list of Keywords

list_words=['hello','timings','doctor','available','speciality','charges','services']

list_syn={}

for word in list_words:

    synonyms=[]

    for syn in wordnet.synsets(word):

        for lem in syn.lemmas():


            # Remove any special characters from synonym strings

            lem_name = re.sub('[^a-zA-Z0-9 \n\.]', ' ', lem.name())

            synonyms.append(lem_name)


    list_syn[word]=set(synonyms)


print (list_syn)



# Building dictionary of Intents & Keywords

keywords={}

keywords_dict={}


# Defining a new key in the keywords dictionary

keywords['greet']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['hello']):

    keywords['greet'].append('.*\\b'+synonym+'\\b.*')


# Defining a new key in the keywords dictionary

keywords['timings']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['timings']):

    keywords['timings'].append('.*\\b'+synonym+'\\b.*')

# Defining a new key in the keywords dictionary

keywords['doctor']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['doctor']):

    keywords['doctor'].append('.*\\b'+synonym+'\\b.*')
# Defining a new key in the keywords dictionary

keywords['available']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['available']):

    keywords['available'].append('.*\\b'+synonym+'\\b.*')
# Defining a new key in the keywords dictionary

keywords['speciality']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['speciality']):

    keywords['speciality'].append('.*\\b'+synonym+'\\b.*')
# Defining a new key in the keywords dictionary

keywords['charges']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['charges']):

    keywords['charges'].append('.*\\b'+synonym+'\\b.*')
# Defining a new key in the keywords dictionary

keywords['services']=[]


# Populating the values in the keywords dictionary with synonyms of keywords formatted with RegEx metacharacters 

for synonym in list(list_syn['services']):

    keywords['services'].append('.*\\b'+synonym+'\\b.*')
                
            
        
        
        
    




for intent, keys in keywords.items():


    # Joining the values in the keywords dictionary with the OR (|) operator updating them in keywords_dict dictionary

    keywords_dict[intent]=re.compile('|'.join(keys))

print (keywords_dict)


# Building a dictionary of responses

responses={

    'greet':'Hello! How can I help you?',
    'timings':'We are open from 9AM to 7PM, but in Emeagancy case we availble 24/7  .',
    'doctor':"'Dr.Patel','Dr.Gandhi','Dr.modi','Dr.Desai'",
    'available':'Docter is available 24/7 for emergancy',
    'speciality':"'Allergists/Immunologists','Anesthesiologists','Cardiologists','Dermatologists'",
    'charges':'charges apply on the based on Dr checkup',
    'services':'we provide Medical Services,Surgical Services,Obstetrical Services,Anesthesiology Services,Laboratory Services,Paediatric Services,Radiology Services',
     'fallback':'I dont quite understand. Could you repeat that?',

}



print ("Welcome to Hospital. How may I help you?")


# While loop to run the chatbot indefinetely

while (True):  


    # Takes the user input and converts all characters to lowercase

    user_input = input().lower()


    # Defining the Chatbot's exit condition

    if user_input == 'quit': 

        print ("Thank you for visiting.")

        break    


    matched_intent = None 


    for intent,pattern in keywords_dict.items():


        # Using the regular expression search function to look for keywords in user input

        if re.search(pattern, user_input): 


            # if a keyword matches, select the corresponding intent from the keywords_dict dictionary

            matched_intent=intent  


    # The fallback intent is selected by default

    key='fallback' 

    if matched_intent in responses:


        # If a keyword matches, the fallback intent is replaced by the matched intent as the key for the responses dictionary

        key = matched_intent 


    # The chatbot prints the response that matches the selected intent

    print (responses[key]) 
	
	
choloropah


pip install -U plotly

import json
import numpy as np
import pandas as pd
import plotly.express as px


india_states=json.load(open("/content/india_district_1.geojson", 'r'))
india_states


state_id_map = {}
for i in india_states['features']:
   i["id"]=i["properties"]["ID_2"]
   state_id_map[i["properties"]["NAME_2"]] = i["id"]
state_id_map


df=pd.read_csv("/content/Chhattisgarh.csv")
df

df["id"] = df["District"].apply(lambda x: state_id_map[x])
df.head()


df["Total Cases"].plot()

df["DensityScale"] = np.log10(df["Total Cases"])
df["DensityScale"].plot()


fig = px.choropleth(
    df,
    locations="id",
    geojson=india_states,
    color="DensityScale",
    hover_name="District",
    hover_data=["Total Cases"],
    title="Total Cases in Chhatisgardh",
)
fig.update_geos(fitbounds="locations", visible=False)
fig.show()







